terraform {
    required_version = ">= 0.11"
    backend "s3" {}
}

provider "aws" {
    alias  = "east"
    region = "us-east-1"
}

provider "aws" {
    region = "${var.region}"
}

variable "region" {
    type = "string"
    default = "us-east-1"
}

variable "project" {
    type = "string"
    default = "Slurp-E"
}

variable "creator" {
    type = "string"
    default = "rkurr@transparent.com"
}

variable "environment" {
    type = "string"
    default = "development"
}

variable "ec2_instance_limit" {
    type = "string"
    default = "2"
}

variable "event_journaler_port" {
    type = "string"
    default = "2070"
}

variable "event_processor_port" {
    type = "string"
    default = "2080"
}

variable "api_server_port" {
    type = "string"
    default = "2090"
}

variable "ingress_cidrs" {
    type = "list"
    default = ["64.222.174.146/32","98.216.147.13/32"]
}

variable "api_domain_name" {
    type = "string"
    default = "slurp-e.transparent.engineering"
}

variable "domain_name" {
    type = "string"
    default = "transparent.engineering"
}

data "terraform_remote_state" "vpc" {
    backend = "s3"
    config {
        bucket = "transparent-test-terraform-state"
        key    = "us-east-1/all/development/networking/vpc/terraform.tfstate"
        region = "us-east-1"
    }
}

data "terraform_remote_state" "security-groups" {
    backend = "s3"
    config {
        bucket = "transparent-test-terraform-state"
        key    = "us-east-1/all/development/compute/security-groups/terraform.tfstate"
        region = "us-east-1"
    }
}

data "terraform_remote_state" "iam" {
    backend = "s3"
    config {
        bucket = "transparent-test-terraform-state"
        key    = "global/all/development/security/iam/terraform.tfstate"
        region = "us-east-1"
    }
}

data "terraform_remote_state" "load_balancer" {
    backend = "s3"
    config {
        bucket = "transparent-test-terraform-state"
        key    = "us-east-1/all/development/compute/load-balancer/terraform.tfstate"
        region = "us-east-1"
    }
}

data "aws_acm_certificate" "certificate" {
    provider = "aws.east"
    domain   = "*.${var.domain_name}"
    statuses = ["ISSUED"]
}

data "aws_route53_zone" "selected" {
    provider     = "aws.east"
    name         = "${var.domain_name}."
    private_zone = false
}

data "terraform_remote_state" "api_gateway" {
    backend = "s3"
    config {
        bucket = "transparent-test-terraform-state"
        key    = "us-east-1/all/all/application-services/api-gateway/terraform.tfstate"
        region = "us-east-1"
    }
}

data "terraform_remote_state" "api_gateway_binding" {
    backend = "s3"
    config {
        bucket = "transparent-test-terraform-state"
        key    = "us-east-1/slurp-e/all/terraform.tfstate"
        region = "us-east-1"
    }
}

module "bastion" {
    source = "kurron/bastion/aws"

    region                      = "${var.region}"
    project                     = "${var.project}"
    creator                     = "${var.creator}"
    environment                 = "${var.environment}"
    freetext                    = "Have at least one instance available for SSH access"
    instance_type               = "t2.nano"
    ssh_key_name                = "Bastion"
    min_size                    = "1"
    max_size                    = "2"
    cooldown                    = "60"
    health_check_grace_period   = "300"
    desired_capacity            = "1"
    scale_down_desired_capacity = "0"
    scale_down_min_size         = "0"
    scale_up_cron               = "0 7 * * MON-FRI"
    scale_down_cron             = "0 0 * * SUN-SAT"
    public_ssh_key              = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCv70t6ne08BNDf3aAQOdhe7h1NssBGPEucjKA/gL9vXpclGBqZnvOiQltKrOeOLzcbDJYDMYIJCwtoq7R/3RLOLDSi5OChhFtyjGULkIxa2dJgKXWPz04E1260CMqkKcgrQ1AaYA122zepakE7d+ysMoKSbQSVGaleZ6aFxe8DfKMzAFFra44tF5JUSMpuqwwI/bKEyehX/PDMNe/GWUTk+5c4XC6269NbaeWMivH2CiYPPBXblj6IT+QhBY5bTEFT57GmUff1sJOyhGN+9kMhlsSrXtp1A5wGiZ8nhoUduphzP3h0RNbRVA4mmI4jMnOF51uKbOvNk3Y79FSIS9Td Access to Bastion box"
    security_group_ids          = ["${data.terraform_remote_state.security-groups.bastion_id}"]
    subnet_ids                  = "${data.terraform_remote_state.vpc.public_subnet_ids}"
}

module "ec2" {
    source = "kurron/ec2/aws"

    region             = "${var.region}"
    name               = "Docker Host"
    project            = "${var.project}"
    purpose            = "Run Docker containers"
    creator            = "${var.creator}"
    environment        = "${var.environment}"
    freetext           = "Configured to pull images from production ECR"
    duty               = "Docker"
    ami_regexp         = "^amzn-ami-.*-amazon-ecs-optimized$"
    ebs_optimized      = "false"
    instance_type      = "t2.micro"
    ssh_key_name       = "${module.bastion.ssh_key_name}"
    security_group_ids = ["${data.terraform_remote_state.security-groups.ec2_id}"]
    subnet_ids         = "${data.terraform_remote_state.vpc.public_subnet_ids}"
    instance_profile   = "${data.terraform_remote_state.iam.docker_profile_id}"
    scheduled          = "Yes"
    instance_limit     = "${var.ec2_instance_limit}"
}

module "ec2_park" {
    source = "kurron/ec2-park/aws"

    region                = "${var.region}"
    project               = "${var.project}"
    creator               = "${var.creator}"
    environment           = "${var.environment}"
    freetext              = "Park select instances during off-hours"
    role_arn              = "${data.terraform_remote_state.iam.ec2_park_role_arn}"
    start_cron_expression = "cron(0 7 ? * MON-FRI *)"
    stop_cron_expression  = "cron(0 0 ? * SUN-SAT *)"
}

module "cloudwatch_log_api_server" {
    source = "kurron/cloudwatch-log/aws"

    region         = "${var.region}"
    project        = "${var.project}"
    purpose        = "Store logs from Slurp-E API Server Docker containers"
    creator        = "${var.creator}"
    environment    = "${var.environment}"
    freetext       = "Not sure if we need a separate group for non-Docker logs"
    group_name     = "/${var.environment}/${var.project}/api-server"
    retention_days = "7"
}

module "cloudwatch_log_event_journaler" {
    source = "kurron/cloudwatch-log/aws"

    region         = "${var.region}"
    project        = "${var.project}"
    purpose        = "Store logs from Slurp-E Event Journaler Docker containers"
    creator        = "${var.creator}"
    environment    = "${var.environment}"
    freetext       = "Not sure if we need a separate group for non-Docker logs"
    group_name     = "/${var.environment}/${var.project}/event-journaler"
    retention_days = "7"
}

module "cloudwatch_log_event_processor" {
    source = "kurron/cloudwatch-log/aws"

    region         = "${var.region}"
    project        = "${var.project}"
    purpose        = "Store logs from Slurp-E Event Processor Docker containers"
    creator        = "${var.creator}"
    environment    = "${var.environment}"
    freetext       = "Not sure if we need a separate group for non-Docker logs"
    group_name     = "/${var.environment}/${var.project}/event-processor"
    retention_days = "7"
}

# We MIGHT be able to wrap this stuff into a sub-module but, for now, do it by hand

module "event_journaler_service_attachment" {
    source = "kurron/alb-service-attachment/aws"

    region            = "${var.region}"
    name              = "Event Journaler"
    project           = "${var.project}"
    purpose           = "Expose the Event Journaler port to the load balancer"
    creator           = "${var.creator}"
    environment       = "${var.environment}"
    freetext          = "No notes at this time."
    service_port      = "${var.event_journaler_port}"
    health_check_path = "/operations/health"
    vpc_id            = "${data.terraform_remote_state.vpc.vpc_id}"
    alb_arn           = "${data.terraform_remote_state.load_balancer.alb_arn}"
    instance_ids      = ["${module.ec2.instance_ids}"]
    instance_count    = "${var.ec2_instance_limit}"
    security_group_id = "${data.terraform_remote_state.security-groups.alb_id}"
    vpc_cidr          = ["${data.terraform_remote_state.vpc.cidr}"]
}

module "event_processor_service_attachment" {
    source = "kurron/alb-service-attachment/aws"

    region            = "${var.region}"
    name              = "Event Processor"
    project           = "${var.project}"
    purpose           = "Expose the Event Processor port to the load balancer"
    creator           = "${var.creator}"
    environment       = "${var.environment}"
    freetext          = "No notes at this time."
    service_port      = "${var.event_processor_port}"
    health_check_path = "/operations/health"
    vpc_id            = "${data.terraform_remote_state.vpc.vpc_id}"
    alb_arn           = "${data.terraform_remote_state.load_balancer.alb_arn}"
    instance_ids      = ["${module.ec2.instance_ids}"]
    instance_count    = "${var.ec2_instance_limit}"
    security_group_id = "${data.terraform_remote_state.security-groups.alb_id}"
    vpc_cidr          = ["${data.terraform_remote_state.vpc.cidr}"]
}

module "api_server_service_attachment" {
    source = "kurron/alb-service-attachment/aws"

    region            = "${var.region}"
    name              = "API Server"
    project           = "${var.project}"
    purpose           = "Expose the API Server port to the load balancer"
    creator           = "${var.creator}"
    environment       = "${var.environment}"
    freetext          = "No notes at this time."
    service_port      = "${var.api_server_port}"
    health_check_path = "/${var.environment}/slurp-e-api/operations/health"
    vpc_id            = "${data.terraform_remote_state.vpc.vpc_id}"
    alb_arn           = "${data.terraform_remote_state.load_balancer.alb_arn}"
    instance_ids      = ["${module.ec2.instance_ids}"]
    instance_count    = "${var.ec2_instance_limit}"
    security_group_id = "${data.terraform_remote_state.security-groups.alb_id}"
    vpc_cidr          = ["${data.terraform_remote_state.vpc.cidr}"]
}

module "journaler_api_gateway_deployment" {
    source                    = "kurron/api-gateway-deployment/aws"

    region                    = "${var.region}"
    api_gateway_id            = "${data.terraform_remote_state.api_gateway.government_gateway_id}"
    parent_resource_id        = "${data.terraform_remote_state.api_gateway_binding.journaler_parent_resource_id}"
    parent_method_http_method = "${data.terraform_remote_state.api_gateway_binding.journaler_parent_method_http_method}"
    target_url                = "http://${data.terraform_remote_state.load_balancer.alb_dns_name}:${var.event_journaler_port}"
    child_resource_id         = "${data.terraform_remote_state.api_gateway_binding.journaler_child_resource_id}"
    child_method_http_method  = "${data.terraform_remote_state.api_gateway_binding.journaler_child_method_http_method}"
    stage_name                = "${var.environment}"
    stage_description         = "APIs intended for the ${var.environment} environment"
    deployment_description    = "This deployment points us to the ${var.environment} load balancer"
}

module "processor_api_gateway_deployment" {
    source                    = "kurron/api-gateway-deployment/aws"

    region                    = "${var.region}"
    api_gateway_id            = "${data.terraform_remote_state.api_gateway.government_gateway_id}"
    parent_resource_id        = "${data.terraform_remote_state.api_gateway_binding.processor_parent_resource_id}"
    parent_method_http_method = "${data.terraform_remote_state.api_gateway_binding.processor_parent_method_http_method}"
    target_url                = "http://${data.terraform_remote_state.load_balancer.alb_dns_name}:${var.event_processor_port}"
    child_resource_id         = "${data.terraform_remote_state.api_gateway_binding.processor_child_resource_id}"
    child_method_http_method  = "${data.terraform_remote_state.api_gateway_binding.processor_child_method_http_method}"
    stage_name                = "${var.environment}"
    stage_description         = "APIs intended for the ${var.environment} environment"
    deployment_description    = "This deployment points us to the ${var.environment} load balancer"
}

module "api_server_processor_api_gateway_deployment" {
    source                    = "kurron/api-gateway-deployment/aws"

    region                    = "${var.region}"
    api_gateway_id            = "${data.terraform_remote_state.api_gateway.government_gateway_id}"
    parent_resource_id        = "${data.terraform_remote_state.api_gateway_binding.api_server_parent_resource_id}"
    parent_method_http_method = "${data.terraform_remote_state.api_gateway_binding.api_server_parent_method_http_method}"
    target_url                = "http://${data.terraform_remote_state.load_balancer.alb_dns_name}:${var.api_server_port}/${var.environment}/slurp-e-api"
    child_resource_id         = "${data.terraform_remote_state.api_gateway_binding.api_server_child_resource_id}"
    child_method_http_method  = "${data.terraform_remote_state.api_gateway_binding.api_server_child_method_http_method}"
    stage_name                = "${var.environment}"
    stage_description         = "APIs intended for the ${var.environment} environment"
    deployment_description    = "This deployment points us to the ${var.environment} load balancer"
}

module "api_key" {
    source                = "kurron/api-key/aws"

    region                = "${var.region}"
    key_name              = "${var.environment}"
    key_description       = "For use in the ${var.environment} environment"
    quota_limit           = "10000"
    quota_period          = "DAY"
    burst_limit           = "100"
    steady_state_limit    = "10"
    api_gateway_id        = "${data.terraform_remote_state.api_gateway.government_gateway_id}"
    deployment_stage_name = "${var.environment}"
}
